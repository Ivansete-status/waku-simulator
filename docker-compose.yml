version: "3.7"


networks:
  simulation:
      driver: bridge
      ipam:
          driver: default
          config:
              - subnet: "10.1.0.0/22"

# Environment variable definitions
x-pg-pass: &pg_pass ${POSTGRES_PASSWORD:-test123}
x-pg-user: &pg_user ${POSTGRES_USER:-postgres}

x-pg-environment: &pg_env
  environment:
    POSTGRES_USER: *pg_user
    POSTGRES_PASSWORD: *pg_pass
    PGDATA: /var/lib/postgresql/data/pgdata

x-pg-exporter-env: &pg_exp_env
  environment:
    POSTGRES_PASSWORD: *pg_pass
    DATA_SOURCE_URI: postgres?sslmode=disable
    DATA_SOURCE_USER: *pg_user
    DATA_SOURCE_PASS: *pg_pass
    PG_EXPORTER_EXTEND_QUERY_PATH: /etc/pgexporter/queries.yml

services:

  bootstrap:
    image: ${NWAKU_IMAGE}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    #Â TODO: expose some ports to inject traffic
    ports:
      - 127.0.0.1:60000:60000
      - 127.0.0.1:8008:8008
      - 127.0.0.1:9000:9000
      - 127.0.0.1:8545:8545
    entrypoint: sh
    command:
    - '/opt/run_bootstrap.sh'
    volumes:
      - ./run_bootstrap.sh:/opt/run_bootstrap.sh:Z
    networks:
      - simulation
  
  nwaku:
    image: ${NWAKU_IMAGE}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_NWAKU_NODES}
    entrypoint: sh
    command:
      - '/opt/run_nwaku.sh'
    volumes:
      - ./run_nwaku.sh:/opt/run_nwaku.sh:Z
    depends_on:
      - bootstrap
    networks:
      - simulation

  nwaku-store-postgres:
    image: ${NWAKU_IMAGE}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_NWAKU_STORE_POSTGRES_NODES}
    entrypoint: sh
    <<:
      - *pg_env
    command:
      - '/opt/run_nwaku_store_postgres.sh'
    volumes:
      - ./run_nwaku_store_postgres.sh:/opt/run_nwaku_store_postgres.sh:Z
    depends_on:
      - bootstrap
      - postgres
    networks:
      - simulation

  nwaku-store-sqlite:
    image: ${NWAKU_IMAGE}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_NWAKU_STORE_SQLITE_NODES}
    entrypoint: sh
    command:
      - '/opt/run_nwaku_store_sqlite.sh'
    volumes:
      - ./run_nwaku_store_sqlite.sh:/opt/run_nwaku_store_sqlite.sh:Z
    depends_on:
      - bootstrap
    networks:
      - simulation

  gowaku:
    image: ${GOWAKU_IMAGE}
    restart: on-failure
    labels:
      com.centurylinklabs.watchtower.enable: '${WATCHTOWER_ENABLED:-false}'
    deploy:
      replicas: ${NUM_GOWAKU_NODES}
    entrypoint: sh
    command:
      - '/opt/run_gowaku.sh'
    volumes:
      - ./run_gowaku.sh:/opt/run_gowaku.sh:Z
    depends_on:
      - bootstrap

  waku-publisher:
    image: alrevuelta/waku-publisher:9fb206c
    entrypoint: sh
      - 'opt/run_wakupublisher.sh'
    volumes:
      - ./run_wakupublisher.sh:/opt/run_wakupublisher.sh:Z
    environment:
      MSG_PER_SECOND: 10
      MSG_SIZE_KBYTES: 10
    networks:
      - simulation

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:z
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=7d
    ports:
      - 127.0.0.1:9090:9090
    restart: on-failure
    networks:
      - simulation

  grafana:
    image: grafana/grafana:latest
    env_file:
      - ./monitoring/configuration/grafana-plugins.env
    volumes:
      - ./monitoring/configuration/grafana.ini:/etc/grafana/grafana.ini:z
      - ./monitoring/configuration/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:z
      - ./monitoring/configuration/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:z
      - ./monitoring/configuration/dashboards:/var/lib/grafana/dashboards/:z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_icon.svg:z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_typelogo.svg:z
      - ./monitoring/configuration/customizations/custom-logo.png:/usr/share/grafana/public/img/fav32.png:z
    ports:
      #- 127.0.0.1:3000:3000
      # open port to access the dashboard
      - 3000:3000
    restart: on-failure
    depends_on:
      - prometheus
    networks:
      - simulation

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    #ports:
    #  - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    networks:
      - simulation

  redis:
    image: redis:latest
    container_name: redis
    #ports:
    #  - 6379:6379
    networks:
      - simulation

  postgres:
    # This service is used when the Waku node has the 'store' protocol enabled
    # and the store-message-db-url is set to use Postgres
    image: postgres:15.4-alpine3.18
    restart: on-failure
    <<: *pg_env
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
      - ./postgres_cfg/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres_cfg/db.sql:/docker-entrypoint-initdb.d/db.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - simulation

  postgres-exporter:
    # Service aimed to scrape information from Postgres and post it to Prometeus
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    restart: on-failure
    <<: *pg_exp_env
    volumes:
      - ./monitoring/configuration/postgres-exporter.yml:/etc/pgexporter/postgres-exporter.yml
      - ./monitoring/configuration/pg-exporter-queries.yml:/etc/pgexporter/queries.yml
    command:
      # Both the config file and 'DATA_SOURCE_NAME' should contain valid connection info
      - --config.file=/etc/pgexporter/postgres-exporter.yml
    networks:
      - simulation
    depends_on:
      - postgres
